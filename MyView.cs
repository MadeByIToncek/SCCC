
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.17.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace SCCC
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Globalization;
    using Terminal.Gui;
    public partial class MyView
    {
        public string timingsPath;
        public static SCCCManager runtime;
        public static DateTime tZero = new DateTime(2023,11,17,15,00,00);
        public MyView()
        {
            InitializeComponent();
            runtime = new SCCCManager();

            start.Clicked += () =>
            {
                var ok = new Button()
                {
                    X = Pos.Center(),
                    Y = 0,
                    Text = "LAUNCH!",
                    Width = 9,
                    Height = 1,
                };

                var entry = new TextField()
                {
                    X = 1,
                    Y = 1,
                    Width = Dim.Fill() - 1,
                    Height = 1
                };

                ok.Clicked += () =>
                {
                    int port = -1;
                    try
                    {
                        port = int.Parse(entry.Text.ToString());
                    }
                    catch (Exception e)
                    {
                        MessageBox.Query("ALERT", "Unable to parse port number \"" + entry.Text.ToString() + "\"", "Ok");
                        Application.RequestStop();
                        Application.RequestStop();
                        return;
                    };
                    if (port > 65535 || port < 0)
                    {
                        MessageBox.Query("ALERT", "Port number \"" + entry.Text.ToString() + "\" outside allowed range 1-65535", "Ok");
                        Application.RequestStop();
                        Application.RequestStop();
                        return;
                    }
                    Console.WriteLine(port);
                    //runtime.StartServer();
                    Application.RequestStop();
                };



                var dialog = new Dialog("Enter Address", 30, 7, ok);
                dialog.Add(entry);
                Application.Run(dialog);
            };

            sync.Clicked += () =>
            {
                if(timingsPath == null)
                {
                    PickFile();
                }
                UpdateTimings(timingsPath);
            };
        }
       
        private void PickFile()
        {
            string[] exts = new string[1];
            exts[0] = ".timings";
            OpenDialog diag = new OpenDialog()
            {
                Title = "Sync Timings",
                Message = "Open .timings file",
                AllowsMultipleSelection = false,
                AllowedFileTypes = exts
            };
            Application.Run(diag);

            if (!diag.Canceled && diag.FilePaths.Count == 1)
            {
                timingsPath = diag.FilePaths[0];
            }
        }
        private void UpdateTimings(string v)
        {
            try
            {

                var dt = new DataTable();


                int explicitCols = 6;
                dt.Columns.Add(new DataColumn("Abs.Time", typeof(string)));
                dt.Columns.Add(new DataColumn("Rel.Time", typeof(string)));
                dt.Columns.Add(new DataColumn("Description", typeof(string)));

                // Open the text file using a stream reader.
                using (var sr = new StreamReader(v))
                {


                    string input = sr.ReadToEnd();
                    string[] lines = input.Split(new char[] { '\n', });
                    tableView.RemoveAll();
                    foreach (var line in lines)
                    {
                        int time = int.Parse(line.Split(new char[] { ':', })[0].Replace("\r", ""));
                        string desc = line.Split(new char[] { ':', })[1].Replace("\r", "");

                        string abs = tZero.AddSeconds(time).ToShortTimeString();
                        string rel = toString((tZero.AddSeconds(time)) - tZero);


                        List<object> row = new List<object>(){
                            abs,
                            rel,
                            desc
                        };
                        dt.Rows.Add(row.ToArray());
                    }
                    tableView.Table = dt;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("The file could not be read:");
                Console.WriteLine(e.Message);
                MessageBox.Query("ALERT", "Unable to read .timings file \"" + v + "\"", "Ok");
                Application.RequestStop();
            }
        }

        private string toString(TimeSpan diff)
        {
            return string.Format("{0:g}", diff);
        }
    }

    internal record TimeTableElement(int time, string desc)
    {

    }
}
